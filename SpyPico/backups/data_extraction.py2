import re, json

# Expresión regular para los diferentes patrones
regex_sistema = re.compile(r"^(OS Name|OS Version|System Manufacturer|System Model|Domain|Nombre del sistema operativo|Versión del sistema operativo|Fabricante del sistema|Modelo del sistema|Dominio|whoami):\s*(.*)")
regex_usuario = re.compile(r"^(.*)\s+(True|False)$")
regex_redes = re.compile(r"^(.*)\s+(\d+\.\d+\.\d+\.\d+)$")
regex_ip_publica = re.compile(r"IP PUBLICA:\s*(.*)")
regex_wifi = re.compile(r"^(.*) : (.*)$")
regex_clave = re.compile(r"PASSWORD: (.+)")

# Diccionario donde se almacenan los datos
data = {
    "Maquina": {},
    "Usuarios": {},
    "Redes": [],
    "IP_Publica": "",
    "Redes_WiFi": [],
    "Clave_Base64": ""
}

def regex(file):
    _file = file.splitlines()
    
    for line in _file:
        print(f"Procesando línea: {line}")  # Para ver en qué línea ocurre el error
        
        # Ignorar líneas de encabezado que no contienen datos de red
        if "InterfaceAlias" in line or "--------------" in line:
            print(f"Línea ignorada (encabezado): {line}")
            continue
        
        # Procesar los datos del sistema
        match = regex_sistema.match(line)
        if match:
            key, value = match.groups()
            data["Maquina"][key] = value
            continue

        # Procesar los usuarios
        match = regex_usuario.match(line)
        if match:
            user, state = match.groups()
            if state == "True":
                data["Usuarios"][user.strip()] = state
            continue

        # Procesar la IP pública
        match = regex_ip_publica.match(line)
        if match:
            data["IP_Publica"] = match.group(1)
            continue

        # Procesar redes
        match = regex_redes.match(line)
        if match:
            interface, ip = match.groups()
            # Asegurarnos de que solo procesamos una interfaz con una IP
            print(f"Coincidencia encontrada para redes: {match.groups()}")  # Depuración
            print(f"Interfaz encontrada: {interface.strip()} - IP: {ip}")
            data["Redes"].append({"Interfaz": interface.strip(), "IP": ip})
            continue

        # Procesar redes WiFi
        match = regex_wifi.match(line)
        if match:
            network, password = match.groups()
            data["Redes_WiFi"].append({"SSID": network.strip(), "Clave": password.strip()})
            continue

        # Procesar claves Base64
        match = regex_clave.match(line)
        if match:
            data["Clave_Base64"] = match.group(1)
            continue
        
        # Si no coincide con ningún patrón
        print(f"No se procesó: {line}")

    return data
